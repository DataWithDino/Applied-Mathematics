
@misc{noauthor_zug_2024,
	title = {Zug um {Zug} ({Spiel})},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://de.wikipedia.org/w/index.php?title=Zug_um_Zug_(Spiel)&oldid=245226275},
	abstract = {Zug um Zug ist ein Brettspiel des britischen Spieleautors Alan R. Moon, bei dem es um die Nutzung von Eisenbahnstrecken in den USA geht. Die englische Ausgabe erschien unter dem Namen Ticket to Ride. 2004 erhielt es die weltweit bedeutendste Auszeichnung für Brettspiele, den Kritikerpreis Spiel des Jahres.
Alan R. Moon wurde somit nach Elfenland 1998 zum zweiten Mal mit dem Spiel des Jahres geehrt. 1999 wurde sein Spiel Union Pacific, ebenfalls ein Spiel mit dem Hintergrund Eisenbahn, für das Spiel des Jahres nominiert. Zug um Zug nimmt – nicht nur optisch – unverkennbar Anleihen an Union Pacific, dessen Spielbrett ebenfalls eine Nordamerika-Karte darstellt.},
	language = {de},
	urldate = {2024-06-17},
	journal = {Wikipedia},
	month = may,
	year = {2024},
	note = {Page Version ID: 245226275},
	file = {Snapshot:/Users/dino.dervisevic/Zotero/storage/KM7D37K6/Zug_um_Zug_(Spiel).html:text/html},
}

@misc{noauthor_zug_nodate,
	title = {Zug um {Zug}: {Deutschland}},
	shorttitle = {Zug um {Zug}},
	url = {https://spielbasis-ruhr.de/products/zug-um-zug-deutschland},
	abstract = {Ab 8 Jahren {\textbar} 2-5 Personen {\textbar} 60min Spieldauer {\textbar} In Zug um Zug Deutschland bauen die Spieler ein Schienennetz auf, um vorgegebene Städte zu verbinden},
	language = {de},
	urldate = {2024-06-17},
	journal = {Spielbasis Ruhr},
	file = {Snapshot:/Users/dino.dervisevic/Zotero/storage/HS6V9IXL/zug-um-zug-deutschland.html:text/html},
}

@misc{noauthor_matplotlib_nodate,
	title = {Matplotlib — {Visualization} with {Python}},
	url = {https://matplotlib.org/},
	urldate = {2024-06-17},
	file = {Matplotlib — Visualization with Python:/Users/dino.dervisevic/Zotero/storage/ZSNT6382/matplotlib.org.html:text/html},
}

@misc{noauthor_networkx_nodate,
	title = {{NetworkX} — {NetworkX} documentation},
	url = {https://networkx.org/},
	urldate = {2024-06-17},
	file = {NetworkX — NetworkX documentation:/Users/dino.dervisevic/Zotero/storage/4DTX2X2R/networkx.org.html:text/html},
}

@misc{noauthor_adjazenzmatrix_2024,
	title = {Adjazenzmatrix},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://de.wikipedia.org/w/index.php?title=Adjazenzmatrix&oldid=242752433},
	abstract = {Eine Adjazenzmatrix (manchmal auch Nachbarschaftsmatrix) eines Graphen ist eine Matrix, die speichert, welche Knoten des Graphen durch eine Kante verbunden sind. Sie besitzt für jeden Knoten eine Zeile und eine Spalte, woraus sich für n Knoten eine 
  
    
      
        n
        ×
        n
      
    
    \{{\textbackslash}displaystyle n{\textbackslash}times n\}
  
-Matrix ergibt. Ein Eintrag in der i-ten Zeile und j-ten Spalte gibt hierbei an, ob eine Kante von dem i-ten zu dem j-ten Knoten führt. Steht an dieser Stelle eine 0, ist keine Kante vorhanden – eine 1 gibt an, dass eine Kante existiert, siehe Abbildung rechts. 
Es gibt unterschiedliche Varianten, abhängig von der Art des Graphen, z. B. für Mehrfachkanten. 
Die Repräsentation eines Graphen als Matrix erlaubt den Einsatz von Methoden der linearen Algebra. Die Anwendung und Untersuchung solcher Methoden bildet ein zentrales Thema in der spektralen Graphentheorie. Es bildet damit eine Schnittstelle zwischen Graphentheorie und linearer Algebra.},
	language = {de},
	urldate = {2024-06-17},
	journal = {Wikipedia},
	month = mar,
	year = {2024},
	note = {Page Version ID: 242752433},
	file = {Snapshot:/Users/dino.dervisevic/Zotero/storage/NAJA9SGE/Adjazenzmatrix.html:text/html},
}

@misc{noauthor_zug_nodate-1,
	title = {Zug um {Zug} {Deutschland} - {Play} different.™ {\textbar} {Days} of {Wonder}},
	url = {https://www.google.com/imgres?q=zug+um+zug+deutschland&imgurl=https://cdn.svc.asmodee.net/production-daysofwonder/uploads/sites/3/2023/09/720315-T2RG-SpreadBox-DE.png&imgrefurl=https://www.daysofwonder.com/de/zug-um-zug/deutschland/&docid=N4GQvmwJxRgPLM&tbnid=-ssBh_7jPBQ4uM&vet=12ahUKEwiOnOTJzrqGAxWcBNsEHc-cJt0QM3oECD4QAA..i&w=510&h=294&hcb=2&ved=2ahUKEwiOnOTJzrqGAxWcBNsEHc-cJt0QM3oECD4QAA&sfr=vfe&source=sh/x/im/can/1},
	abstract = {Über Google auf daysofwonder.com gefunden},
	language = {de},
	urldate = {2024-06-17},
	journal = {www.google.com},
	file = {Snapshot:/Users/dino.dervisevic/Zotero/storage/TJ5E6PGN/imgres.html:text/html},
}

@misc{studyflix_dijkstra_2019,
	title = {Dijkstra {Algorithmus} - {Beispiel} mit {Graph} und {Tabelle} veranschaulicht!},
	url = {https://www.youtube.com/watch?v=8NsD01kzJwg},
	abstract = {In diesem Video erklären wir dir den Dijkstra Algorithmus Schritt für Schritt an einem einfachen Beispiel!

Der Dijkstra Algorithmus ist ein sogenannter Greedy Algorithmus. Er hilft dir die kürzesten beziehungsweise kostengünstigsten Wege zu berechnen. Die Kantengewichte, so nennt man die Kosten, um von einem Punkt zum nächsten zu kommen, dürfen beim Dijkstra-Algorithmus nicht negativ sein. Falls jedoch negative Kosten auftreten , solltest du besser den Bellman-Ford-Algorithmus anwenden. 

Viele weitere Videos für's Studium gibt’s auf https://studyflix.de

Unter https://studyflix.de/wirtschaftswisse... findest du unter anderem folgende Videos zum Thema Operations Research - Graphentheorie:

Grundbegriffe der Graphentheorie
Bipartiter Graph
Euler- und Hamiltonkreis
Adjazenzmatrix und Adjazenzliste
Indizenzmatrix und Indizenzliste
Greedy-Algorithmus
Dijstra Algorithmus
Kruskal Algorithmus
Prim Algorithmus
Bellman-Ford-Algorithmus
Floyd Warshall Algorithmus
Ungarische Methode

Weitere Informationen findest du auf Facebook:   / studyflix   
-----------------------------------------------------------------------------------------------------------
Über uns:

Wir sind eine junge, schnell wachsende E-Learning Plattform, die kostenlose Lernvideos für Dich als Student zur Verfügung stellt. Täglich kommt ein neues Video dazu. Von Wirtschaft über Technik bis zu allgemeinen Themen – alles ist dabei. Wir sind überzeugt, dass Lernen nicht langweilig oder gar teuer sein muss! Deshalb bieten wir hochwertige, animierte Lernvideos, mit denen Lernen Spaß macht – und das komplett kostenlos während deines ganzen Studiums!},
	urldate = {2024-06-17},
	author = {{Studyflix}},
	month = may,
	year = {2019},
}

@misc{polylog_hidden_2023,
	title = {The hidden beauty of the {A}* algorithm},
	url = {https://www.youtube.com/watch?v=A60q6dcoCjw},
	abstract = {00:00 Intro
01:38 Change the lengths!
06:34 What is a good potential?
12:31 Implementation
16:20 Bonus

Tom Sláma's video:    • Theseus and the Minotaur {\textbar} Exploring ...  

Our Patreon:   / polylog  

Some related stuff:

-- One thing I did not mention is that Dijkstra's algorithm is designed to solve the problem of finding the shortest path from the start node to all other nodes of the graph. It does this job very well, in almost linear time, so there is not much to improve there. It is the problem of finding the shortest path between two nodes where A* usually improves upon Dijkstra. 

-- Here is a link to another example of A* run from Sarajevo to east Italy. You can see how the algorithm quickly reaches the first city, Tirana, but then it gets stuck because of the Adriatic sea. So it searches along its coastline until it finds Italy. After that it confidently runs through Italy until it finds the destination. 
https://github.com/polylog-cs/Astar/b...

-- If your heuristic is not consistent, but at least admissible, A* will still return the correct answer, though its time complexity may be exponential in the network size. 

-- IDA* is a popular algorithm that relates to iterative deepening depth first search the same way as A* relates to Dijkstra/breadth first search. 

-- A perhaps simplest application of potential reweighting technique is the Johnson’s algorithm:
https://en.wikipedia.org/wiki/Johnson...

-- See also this codeforces blog post that collects some applications of potentials in competitive programming. 
https://codeforces.com/blog/entry/95823

-- The underlying reason why potentials are often so useful is that they are dual to the concept of distances in the sense of linear programming duality. 

Problems:

-- Prove that heuristics from the video are consistent. 

-- Prove that the maximum of two consistent heuristics is still consistent. (Thus, if you have two incomparable heuristics, you should combine them this way. )

-- Prove that for any heuristic that is consistent, equal to zero for the goal state and otherwise nonnegative, A* always explores less states than Dijkstra. That is, apart for the time spent on computing the heuristic, A* is never worse than Dijkstra in the problem of finding the shortest path between two points. 


Big thanks to: Richard Hladik, Matěj Konečný, Martin Mareš, Yannic Maus, Jan Petr, Vojtěch Rozhoň, Hanka Rozhoňová, Tom Sláma



Links in the video:
maps.google.com
https://geojson.io/
https://public.opendatasoft.com/explo...
https://stackoverflow.com/questions/2...

Credits: 
To make this video, we used manim, a Python library: https://docs.manim.community/en/stable/ 
The color palette we use is solarized: https://ethanschoonover.com/solarized/
music: Thannoid by Blue Dot Sessions: https://app.sessions.blue/browse/trac...
music: Also sprach Zarathustra from Strauss from wikimedia commons
image of the scroll: https://www.pxfuel.com/en/desktop-wal...
images of the cities are from wikimedia commons},
	urldate = {2024-06-17},
	author = {{polylog}},
	month = jan,
	year = {2023},
}

@misc{noauthor_dijkstra-algorithmus_2024,
	title = {Dijkstra-{Algorithmus}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://de.wikipedia.org/w/index.php?title=Dijkstra-Algorithmus&oldid=243279594},
	abstract = {Der Algorithmus von Dijkstra (nach seinem Erfinder Edsger W. Dijkstra) ist ein Algorithmus aus der Klasse der Greedy-Algorithmen und löst das Problem der kürzesten Pfade für einen gegebenen Startknoten. Er berechnet somit einen kürzesten Pfad zwischen dem gegebenen Startknoten und einem der (oder allen) übrigen Knoten in einem kantengewichteten Graphen (sofern dieser keine Negativkanten enthält).
Für unzusammenhängende ungerichtete Graphen ist der Abstand zu denjenigen Knoten unendlich, zu denen kein Pfad vom Startknoten aus existiert. Dasselbe gilt auch für gerichtete nicht stark zusammenhängende Graphen. Dabei wird der Abstand synonym auch als Entfernung, Kosten oder Gewicht bezeichnet.},
	language = {de},
	urldate = {2024-06-17},
	journal = {Wikipedia},
	month = mar,
	year = {2024},
	note = {Page Version ID: 243279594},
	file = {Snapshot:/Users/dino.dervisevic/Zotero/storage/CTKESIC6/Dijkstra-Algorithmus.html:text/html},
}

@misc{noauthor_graph_2024,
	title = {Graph ({Graphentheorie})},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://de.wikipedia.org/w/index.php?title=Graph_(Graphentheorie)&oldid=242940052},
	abstract = {Ein Graph ist in der Graphentheorie eine abstrakte Struktur, die eine Menge von Objekten zusammen mit den zwischen diesen Objekten bestehenden Verbindungen repräsentiert. Die mathematischen Abstraktionen der Objekte werden dabei Knoten (auch Ecken) des Graphen genannt. Die paarweisen Verbindungen zwischen Knoten heißen Kanten (manchmal auch Bögen). Die Kanten können gerichtet oder ungerichtet sein. Häufig werden Graphen anschaulich gezeichnet, indem die Knoten durch Punkte und die Kanten durch Linien dargestellt werden.

Anschauliche Beispiele für Graphen sind ein Stammbaum oder das U-Bahn-Netz einer Stadt (siehe Abbildungen). Bei einem Stammbaum stellt jeder Knoten ein Familienmitglied dar und jede Kante ist eine Verbindung zwischen einem Elternteil und einem Kind. In einem U-Bahn-Netz stellt jeder Knoten eine U-Bahn-Station dar und jede Kante eine direkte Zugverbindung zwischen zwei Stationen.},
	language = {de},
	urldate = {2024-06-17},
	journal = {Wikipedia},
	month = mar,
	year = {2024},
	note = {Page Version ID: 242940052},
	file = {Snapshot:/Users/dino.dervisevic/Zotero/storage/YAKL6CLR/Graph_(Graphentheorie).html:text/html},
}

@misc{noauthor_v6dbtransportrest_nodate,
	title = {v6.db.transport.rest {API} documentation🔗},
	url = {https://v6.db.transport.rest/api.html},
	language = {en},
	urldate = {2024-06-17},
}

@misc{noauthor_db_nodate,
	title = {{DB} {API} {Marketplace} {\textbar} {DB} {API} {Marketplace}},
	url = {https://developers.deutschebahn.com/db-api-marketplace/apis/},
	urldate = {2024-06-17},
	file = {DB API Marketplace | DB API Marketplace:/Users/dino.dervisevic/Zotero/storage/PFGGGNE9/apis.html:text/html},
}

@misc{noauthor_caching_nodate,
	title = {Caching {Best} {Practices} {\textbar} {Amazon} {Web} {Services}},
	url = {https://aws.amazon.com/caching/best-practices/},
	abstract = {A cache is a high-speed data storage layer which stores a subset of data, typically transient in nature, so that future requests for that data are served up faster than the data’s primary storage location. Discover use cases, best practices, and technology solutions for caching.},
	language = {en-US},
	urldate = {2024-06-17},
	journal = {Amazon Web Services, Inc.},
}

@misc{noauthor_json_nodate,
	title = {{JSON}},
	url = {https://www.json.org/json-en.html},
	urldate = {2024-06-17},
	file = {JSON:/Users/dino.dervisevic/Zotero/storage/XTKQFVKA/json-en.html:text/html},
}

@misc{noauthor_-algorithmus_nodate,
	title = {A*-{Algorithmus} – {Wikipedia}},
	url = {https://de.wikipedia.org/wiki/A*-Algorithmus},
	urldate = {2024-06-17},
}

@misc{noauthor_heuristics_nodate,
	title = {Heuristics},
	url = {https://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html},
	urldate = {2024-06-17},
}

@misc{noauthor_galupki_2022,
	title = {galupki.de},
	url = {https://galupki.de},
	abstract = {galupki.de - Fotografie, Bildbearbeitung, Paintshop Pro, Kalender, Datumsrechnung, Daemmerungszeiten, Sonnenaufgang, Sonnenuntergang, Excel, Finanzberechnungen, Fotogalerie, Rezepte u.v.a.},
	language = {de},
	urldate = {2024-06-17},
	journal = {galupki.de},
	month = aug,
	year = {2022},
	file = {Snapshot:/Users/dino.dervisevic/Zotero/storage/YLLDZ7KN/content.html:text/html},
}

@misc{noauthor_db_nodate-1,
	title = {{DB} {Fahrplan}, {Auskunft}, {Tickets}, informieren und buchen - {Deutsche} {Bahn}},
	url = {https://www.bahn.de/},
	abstract = {Deutsche Bahn: bahn.de - Ihr Mobilitätsportal für Reisen mit der Bahn. Deutschlands beliebtestes Reise- und Mobilitätsportal: Auskunft, Bahnfahrkarten, Online-Tickets, Länder-Tickets,  günstige Angebote rund um Urlaub und Reisen.},
	language = {de},
	urldate = {2024-06-17},
	file = {Snapshot:/Users/dino.dervisevic/Zotero/storage/8H2Z52N4/www.bahn.de.html:text/html},
}
